/*
 * This software is licensed under the Apache 2 license, quoted below.
 *
 * Copyright (c) 1999-2025, Algorithmx Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.rulii.ruleset;

import org.rulii.context.RuleContext;
import org.rulii.model.UnrulyException;

import java.util.concurrent.CompletableFuture;

/**
 * An implementation of RuleSetExecutionStrategy interface that executes a rule set asynchronously using CompletableFuture.
 *
 * @param <T> the type of the result generated by executing the rule set.
 */
public class AsyncRuleSetExecutionStrategy<T> extends RuleSetExecutionStrategyTemplate<CompletableFuture<T>> {

    public AsyncRuleSetExecutionStrategy() {
        super();
    }

    /**
     * Executes the given rule set using the provided rule context asynchronously.
     *
     * @param ruleSet the rule set to be executed. Must not be null.
     * @param ruleContext the rule context containing the necessary state and dependencies for rule execution. Must not be null.
     * @return a CompletableFuture that completes with the result of the rule execution as an instance of type T.
     * @throws UnrulyException if an error occurs during rule execution.
     */
    @Override
    public CompletableFuture<T> run(RuleSet<?> ruleSet, RuleContext ruleContext) throws UnrulyException {
        return CompletableFuture.supplyAsync(() -> {
            RuleSetExecutionStrategy<T> strategy = RuleSetExecutionStrategy.build();
            return strategy.run(ruleSet, ruleContext);
        }, ruleContext.getExecutorService());
    }
}
